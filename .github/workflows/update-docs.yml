name: Update API Documentation

on:
  # Run every 6 hours
  schedule:
    - cron: '0 */6 * * *'
  
  # Allow manual execution
  workflow_dispatch:
  
  # Run when push to main
  push:
    branches: [ main ]

jobs:
  update-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
        
    - name: Install widdershins
      run: npm install -g widdershins
      
    - name: Download OpenAPI spec
      run: |
        curl -o openapi.json https://api.frauddi.com/openapi.json
        
    - name: Convert OpenAPI to Markdown
      run: |
        widdershins openapi.json \
          --language_tabs 'shell:cURL' 'javascript:JavaScript' 'python:Python' \
          --summary \
          --code \
          --httpsnippet \
          --theme darkula \
          --search false \
          -o temp_docs.md
          
    - name: Create Slate-formatted documentation
      run: |
        cat > source/index.html.md << 'EOF'
        ---
        title: Frauddi API Reference
        
        language_tabs:
          - shell: cURL
          - javascript: JavaScript  
          - python: Python
        
        toc_footers:
          - <a href='https://frauddi.com'>Back to Frauddi</a>
          - <a href='mailto:support@frauddi.com'>Support</a>
          - <a href='https://github.com/frauddi/api-docs'>Documentation Source</a>
        
        includes:
          - errors
        
        search: true
        
        code_clipboard: true
        
        logo: logo.png
        
        meta:
          - name: description
            content: Official API documentation for Frauddi - Advanced fraud detection and prevention platform
        ---
        
        # Frauddi API
        
        Welcome to the **Frauddi API**! Our API allows you to integrate advanced fraud detection and prevention capabilities into your applications.
        
        We provide endpoints for fraud assessments, rule management, and comprehensive analytics to help protect your business from fraudulent activities.
        
        Base URL: `https://api.frauddi.com`
        
        ## Authentication
        
        > To authorize, use this code:
        
        ```shell
        curl "https://api.frauddi.com/api/v0/endpoint" \
          -H "Authorization: Bearer YOUR_API_KEY"
        ```
        
        ```javascript
        const response = await fetch('https://api.frauddi.com/api/v0/endpoint', {
          method: 'POST',
          headers: {
            'Authorization': 'Bearer YOUR_API_KEY',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            // request data
          })
        });
        const data = await response.json();
        ```
        
        ```python
        import requests
        
        headers = {
            'Authorization': 'Bearer YOUR_API_KEY',
            'Content-Type': 'application/json'
        }
        
        data = {
            # request data
        }
        
        response = requests.post(
            'https://api.frauddi.com/api/v0/endpoint',
            headers=headers,
            json=data
        )
        result = response.json()
        ```
        
        Frauddi uses API keys to authenticate requests. You can generate API keys from your Frauddi dashboard.
        
        The API expects your key to be included in all requests in the Authorization header:
        
        `Authorization: Bearer YOUR_API_KEY`
        
        <aside class="notice">
        Make sure to replace <code>YOUR_API_KEY</code> with your actual API key.
        </aside>
        
        EOF
        
        # Append converted OpenAPI content (skip the header and fix FastAPI references)
        sed 's/FastAPI v0\.1\.0/Frauddi API v1.0/g; s/FastAPI/Frauddi API/g' temp_docs.md | tail -n +20 >> source/index.html.md
        
    - name: Create errors include file
      run: |
        mkdir -p source/includes
        cat > source/includes/_errors.md << 'EOF'
        # Errors
        
        The Frauddi API uses conventional HTTP response codes to indicate the success or failure of an API request.
        
        Error Code | Meaning
        ---------- | -------
        400 | Bad Request -- The request was invalid or cannot be served
        401 | Unauthorized -- Authentication is required to access this resource
        403 | Forbidden -- You do not have permission to access this resource
        404 | Not Found -- The requested resource could not be found
        409 | Conflict -- The request conflicts with the current state of the resource
        422 | Unprocessable Entity -- Validation errors in the request data
        500 | Internal Server Error -- An unexpected error occurred on the server
        
        ## Error Response Format
        
        ```json
        {
          "error": {
            "type": "bad_request_error",
            "message": "The request was invalid or cannot be served.",
            "status_code": 400
          }
        }
        ```
        
        All errors return a JSON object with an `error` field containing:
        
        - **type**: The specific error type (e.g., "unauthorized_error", "validation_error")
        - **message**: Human-readable error message
        - **status_code**: HTTP status code
        
        ## Error Types
        
        - `bad_request_error` - Invalid request format or parameters
        - `unauthorized_error` - Missing or invalid API key
        - `forbidden_error` - Insufficient permissions
        - `not_found_error` - Resource does not exist
        - `conflict_error` - Request conflicts with current state
        - `unprocessable_entity_error` - Validation failed
        - `internal_server_error` - Server-side error
        EOF
        
    - name: Add custom Frauddi logo and styles
      run: |
        # Create images directory
        mkdir -p source/images
        
        # Download Frauddi logo from the correct URL
        curl -L "https://3l1070r.wordpress.com/wp-content/uploads/2025/09/logo.png" -o source/images/logo.png
        
        # Add custom CSS for Frauddi branding
        cat >> source/stylesheets/screen.css.scss << 'EOF'
        
        // Frauddi custom styles with brand color #16B798
        .tocify-wrapper {
          .logo {
            background-image: url('../images/logo.png');
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
            height: 60px;
            margin: 20px auto;
            width: 150px;
          }
        }
        
        // Hide the placeholder text
        .tocify-wrapper .logo-placeholder {
          display: none !important;
        }
        
        // Frauddi brand colors - turquoise gradient
        .tocify-wrapper > .search {
          background: linear-gradient(to bottom, #16B798, #128a75);
        }
        
        .tocify-wrapper > .search input {
          background: #16B798;
          border-color: #128a75;
        }
        
        // Headers with Frauddi color
        h1 {
          color: #16B798;
          border-bottom: 2px solid #16B798;
        }
        
        h2 {
          color: #128a75;
        }
        
        // Links and accents
        a {
          color: #16B798;
        }
        
        a:hover {
          color: #128a75;
        }
        
        // Code highlighting with Frauddi accent
        .highlight {
          background-color: #f0fffe;
          border-left: 4px solid #16B798;
        }
        
        // Sidebar active item
        .tocify-wrapper .tocify-item.active > .tocify-link {
          background-color: #16B798;
          color: white;
        }
        
        EOF
        
        # Replace FastAPI references with Frauddi
        sed -i 's/FastAPI v0\.1\.0/Frauddi API v1.0/g' temp_docs.md || true
        sed -i 's/FastAPI/Frauddi API/g' temp_docs.md || true
        
    - name: Install Slate dependencies
      run: bundle install
      
    - name: Build Slate documentation
      run: bundle exec middleman build --clean
      
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build
        force_orphan: true
        
    - name: Commit source changes back to main
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add source/ || true
        git add openapi.json || true
        if ! git diff --staged --quiet; then
          git commit -m "Auto-update API documentation from OpenAPI spec [skip ci]"
          git push || echo "Push failed, but continuing..."
        else
          echo "No changes to commit"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
